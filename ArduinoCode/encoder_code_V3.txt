#include <Bounce2.h>

// mux adress pins
#define S0 31
#define S1 29
#define S2 27
#define S3 25

// the input pins (mux's outputs):
#define mux1A 65
#define mux1B 64
#define mux2A 63
#define mux2B 62
#define mux_enable 23

// define encoder button pins (get pin numbers from arduino due schematic and encoders pcb file). undefined buttons for the screen are on pin 37/35/53

#define VCO_BUTTON_PIN 43
#define FM_BUTTON_PIN 39
#define OCT_LVL_BUTTON_PIN 41
#define LFO_BUTTON_PIN 47
#define LFO_MODE_BUTTON_PIN 49
#define ADSR_BUTTON_PIN 51

// instantiate bounce objects
Bounce2::Button VCOButton = Bounce2::Button();
Bounce2::Button FMButton = Bounce2::Button();
Bounce2::Button VCO_OCT_LEVEL_Button = Bounce2::Button();
Bounce2::Button LFOButton = Bounce2::Button();
Bounce2::Button LFO_MODE_Button = Bounce2::Button();
Bounce2::Button ADSRButton = Bounce2::Button();


// Variables to store button states
bool VCO_select = LOW;
bool FM_select = LOW; 
bool VCO1_OCT_LVL_select = LOW; 
bool VCO2_OCT_LVL_select = LOW; 
bool SYNC_select = LOW; 

bool LFO_select = LOW;
bool LFO1_MODE_select = LOW;
bool LFO2_MODE_select = LOW;

bool ADSR_select = LOW;

// Variables to store physical encoder states for all controls 

bool enc_OCTLVL_A;
bool enc_OCTLVL_B;
bool enc_FM_DETUNE_A;
bool enc_FM_DETUNE_B;
bool enc_VCO_PWM_A;
bool enc_VCO_PWM_B;
bool enc_VCO_SHAPE_A;
bool enc_VCO_SHAPE_B;

bool enc_OCTLVL_A_prev;
bool enc_OCTLVL_B_prev;
bool enc_FM_DETUNE_A_prev;
bool enc_FM_DETUNE_B_prev;
bool enc_VCO_PWM_A_prev;
bool enc_VCO_PWM_B_prev;
bool enc_VCO_SHAPE_A_prev;
bool enc_VCO_SHAPE_B_prev;

bool enc_CUTOFF_A_prev;
bool enc_CUTOFF_B_prev;
bool enc_RES_A_prev;
bool enc_RES_B_prev;
bool enc_DRIVE_A_prev;
bool enc_DRIVE_B_prev;

bool enc_CUTOFF_A;
bool enc_CUTOFF_B;
bool enc_RES_A;
bool enc_RES_B;
bool enc_DRIVE_A;
bool enc_DRIVE_B;

bool enc_LFO_FREQ_A;
bool enc_LFO_FREQ_B;
bool enc_lFO_SHAPE_A;
bool enc_LFO_SHAPE_B;
bool enc_LFO_PWM_A;
bool enc_LFO_PWM_B;
bool enc_LFO_AMPLITUDE_A;
bool enc_LFO_AMPLITUDE_B;
bool enc_LFO_OFFSET_A;
bool enc_LFO_OFFSET_B;

bool enc_LFO_FREQ_A_prev;
bool enc_LFO_FREQ_B_prev;
bool enc_lFO_SHAPE_A_prev;
bool enc_LFO_SHAPE_B_prev;
bool enc_LFO_PWM_A_prev;
bool enc_LFO_PWM_B_prev;
bool enc_LFO_AMPLITUDE_A_prev;
bool enc_LFO_AMPLITUDE_B_prev;
bool enc_LFO_OFFSET_A_prev;
bool enc_LFO_OFFSET_B_prev;

bool enc_ADSR_ATTACK_A;
bool enc_ADSR_ATTACK_B;
bool enc_ADSR_DECAY_A;
bool enc_ADSR_DECAY_B;
bool enc_ADSR_SUSTAIN_A;
bool enc_ADSR_SUSTAIN_B;
bool enc_ADSR_RELEASE_A;
bool enc_ADSR_RELEASE_B;

bool enc_ADSR_ATTACK_A_prev;
bool enc_ADSR_ATTACK_B_prev;
bool enc_ADSR_DECAY_A_prev;
bool enc_ADSR_DECAY_B_prev;
bool enc_ADSR_SUSTAIN_A_prev;
bool enc_ADSR_SUSTAIN_B_prev;
bool enc_ADSR_RELEASE_A_prev;
bool enc_ADSR_RELEASE_B_prev;

//initialise parameter positions and previous positions
    
int VCO1_OCT_position  = 0;
int VCO1_LVL_position  = 0;
int VCO1_FM_AMOUNT_position  = 0;
int VCO1_SHAPE_position  = 0;
int VCO1_PWM_position  = 0;
    
int VCO1_OCT_position_prev  = 0;
int VCO1_LVL_position_prev  = 0;
int VCO1_FM_AMOUNT_position_prev  = 0;
int VCO1_SHAPE_position_prev  = 0;
int VCO1_PWM_position_prev  = 0;

int VCO2_OCT_position  = 0;
int VCO2_LVL_position  = 0;
int VCO2_DETUNE_position  = 0;
int VCO2_SHAPE_position  = 0;
int VCO2_PWM_position  = 0;

int VCO2_OCT_position_prev = 0;
int VCO2_LVL_position_prev  = 0;
int VCO2_DETUNE_position_prev  = 0;
int VCO2_SHAPE_position_prev  = 0;
int VCO2_PWM_position_prev  = 0;

int CUTOFF_position  = 0;
int RES_position  = 0;
int DRIVE_position  = 0;

int CUTOFF_position_prev  = 0;
int RES_position_prev  = 0;
int DRIVE_position_prev  = 0;   

int LFO1_FREQ_position  = 0;
int LFO1_SHAPE_position  = 0;
int LFO1_PWM_position  = 0;
int LFO1_AMPLITUDE_position  = 0;
int LFO1_OFFSET_position  = 0;

int LFO1_FREQ_position_prev  = 0;
int LFO1_SHAPE_position_prev  = 0;
int LFO1_PWM_position_prev  = 0;
int LFO1_AMPLITUDE_position_prev  = 0;
int LFO1_OFFSET_position_prev  = 0;

int LFO2_FREQ_position  = 0;
int LFO2_SHAPE_position  = 0;
int LFO2_PWM_position  = 0;
int LFO2_AMPLITUDE_position  = 0;
int LFO2_OFFSET_position  = 0;

int LFO2_FREQ_position_prev  = 0;
int LFO2_SHAPE_position_prev  = 0;
int LFO2_PWM_position_prev  = 0;
int LFO2_AMPLITUDE_position_prev  = 0;
int LFO2_OFFSET_position_prev  = 0;

int ADSR1_ATTACK_position  = 0;
int ADSR1_DECAY_position  = 0;
int ADSR1_SUSTAIN_position  = 0;
int ADSR1_RELEASE_position  = 0;

int ADSR1_ATTACK_position_prev  = 0;
int ADSR1_DECAY_position_prev  = 0;
int ADSR1_SUSTAIN_position_prev = 0;
int ADSR1_RELEASE_position_prev  = 0;

int ADSR2_ATTACK_position  = 0;
int ADSR2_DECAY_position  = 0;
int ADSR2_SUSTAIN_position  = 0;
int ADSR2_RELEASE_position  = 0;

int ADSR2_ATTACK_position_prev  = 0;
int ADSR2_DECAY_position_prev  = 0;
int ADSR2_SUSTAIN_position_prev  = 0;
int ADSR2_RELEASE_position_prev  = 0;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup() {
    // initialise all the encoder buttons to their physical pins, check every 10ms, eventually try to make that 10ms as big as possible without responsitivity loss. 
    
    VCOButton.attach(VCO_BUTTON_PIN,INPUT_PULLUP);
    VCOButton.interval(10);

    FMButton.attach(FM_BUTTON_PIN,INPUT_PULLUP);
    FMButton.interval(10);

    VCO_OCT_LEVEL_Button.attach(OCT_LVL_BUTTON_PIN,INPUT_PULLUP);
    VCO_OCT_LEVEL_Button.interval(10);
    
    LFOButton.attach(LFO_BUTTON_PIN,INPUT_PULLUP);
    LFOButton.interval(10);

    LFO_MODE_Button.attach(LFO_MODE_BUTTON_PIN,INPUT_PULLUP);
    LFO_MODE_Button.interval(10);
    
    ADSRButton.attach(ADSR_BUTTON_PIN,INPUT_PULLUP);
    ADSRButton.interval(10);

    // Buttons are pressed when pin reads LOW voltage
    VCOButton.setPressedState(LOW); 
    FMButton.setPressedState(LOW); 
    VCO_OCT_LEVEL_Button.setPressedState(LOW); 
    LFOButton.setPressedState(LOW); 
    LFO_MODE_Button.setPressedState(LOW); 
    ADSRButton.setPressedState(LOW); 

    // set multiplexer pins modes. mux_enable always stays low, initialise muxs to their 1st position.
    pinMode(S0, OUTPUT);
    pinMode(S1, OUTPUT);
    pinMode(S2, OUTPUT);
    pinMode(S3, OUTPUT);
    digitalWrite(S0,LOW); 
    digitalWrite(S1,LOW); 
    digitalWrite(S2,LOW); 
    digitalWrite(S3,LOW); 
    
    pinMode(mux1A, INPUT); //all encoders that directly control the synth are on mux1, encoders used with the screen are on mux2 
    pinMode(mux1B, INPUT);
    pinMode(mux2A, INPUT);
    pinMode(mux2B, INPUT);

    pinMode(mux_enable, OUTPUT);
    digitalWrite( mux_enable, LOW ); 
    
    // initialise debug serial coms
    Serial.begin(9600);
    Serial.println("Multiplexed Encoder Test:");
    
    //initialise comms to teensy
    Serial3.begin(9600);


}

void loop() {
    updateEncoders();
    //add GAMEDUINO code so that updateEncoder function gets called regularly (100Hz or so)
}   //end Main loop


void updateEncoders() { //runs through all the encoders 
    //update all buttons and accroding states, still to write to the according LEDs through shift registers 
  
    VCOButton.update(); 
    if ( VCOButton.pressed()) {
        VCO_select = !VCO_select;
    }
  
    FMButton.update();  
    if ( FMButton.pressed()) {
        if (VCO_select = LOW) { // button controls wheter fm is linear or exponential  
            FM_select = !FM_select;
            //send change to teensy to switch CD4066 from exp to lin fm or vice versa
        }
        if (VCO_select = HIGH) { // button controls wether we sync VCO2 to 1
            SYNC_select = !SYNC_select;
            //send change to teensy to switch CD4066 SYNC ON or OFF 
        }   
    } 
    VCO_OCT_LEVEL_Button.update(); 
    if ( VCO_OCT_LEVEL_Button.pressed()) {
        VCO1_OCT_LVL_select = !VCO1_OCT_LVL_select;
    }
  
    LFOButton.update(); 
    if ( LFOButton.pressed()) {
        LFO_select = !LFO_select;
    }
  
    LFO_MODE_Button.update(); 
    if ( LFO_MODE_Button.pressed()) {
        if ( LFO_select == LOW){ //button controls LFO1 mode
            LFO1_MODE_select = !LFO1_MODE_select;
            Serial3.write(100);//send ID
            Serial3.write(LFO1_MODE_select);//send value
        }
        if ( LFO_select == HIGH ){ //button controls LFO1 mode
            LFO2_MODE_select = !LFO2_MODE_select;   
            Serial3.write(110);//Send ID
            Serial3.write(LFO2_MODE_select);//send value
        }
    }
    ADSRButton.update(); 
    if ( ADSRButton.pressed()) {
        ADSR_select = !ADSR_select;
    }

    ///////////MULTI ON PIN 0: CONTROLS VCO OCT AND LVL//////////////////////////////////////////////////     
    digitalWrite(S0, LOW);  // adress 0000 is the octave/oscillator level encoder (get that from cheking encoder schematic and pcb file 
    digitalWrite(S1, LOW);
    digitalWrite(S2, LOW);
    digitalWrite(S3, LOW);
    
    if (VCO_select == LOW) { //encoders control VCO1
        if (VCO1_OCT_LVL_select == LOW) { //encoder controls octave number
            VCO1_OCT_position_prev = VCO1_OCT_position;  
        
            getPosition(enc_OCTLVL_A, enc_OCTLVL_B, enc_OCTLVL_A_prev, enc_OCTLVL_B_prev, VCO1_OCT_position, mux1A, mux1B); //get new position
        
            if ( VCO1_OCT_position > 5 ) { //boundary check
                VCO1_OCT_position = 5;
            }
            if ( VCO1_OCT_position < 0 ) {
                VCO1_OCT_position = 0;
            }
        
            if (VCO1_OCT_position != VCO1_OCT_position_prev){
                Serial3.write();//send ID DAC1
                //send value
                //send change to teensy
            }
        }

        if (VCO1_OCT_LVL_select == HIGH) { //encoder controls VCO1 volume
            VCO1_LVL_position_prev = VCO1_LVL_position;
        
            getPosition(enc_OCTLVL_A, enc_OCTLVL_B, enc_OCTLVL_A_prev, enc_OCTLVL_B_prev,VCO1_LVL_position, mux1A, mux1B); //get new position
        
            if ( VCO1_LVL_position > 127 ) { //boundary check
                VCO1_LVL_position = 127;
            }
            if ( VCO1_LVL_position < 0 ) {
                VCO1_LVL_position = 0;
            }
        
            if (VCO1_LVL_position != VCO1_LVL_position_prev){
                //send change to teensy
                Serial3.write();//send ID
                //send value
            }
        }
    }
    if (VCO_select == HIGH) { //encoders control VCO2
        if (VCO2_OCT_LVL_select == LOW) { //encoder controls octave number
            VCO2_OCT_position_prev = VCO2_OCT_position;
        
            getPosition(enc_OCTLVL_A, enc_OCTLVL_B, enc_OCTLVL_A_prev, enc_OCTLVL_B_prev, VCO2_OCT_position, mux1A, mux1B); //get new position
        
            if ( VCO2_OCT_position > 5 ) { //boundary check
                VCO2_OCT_position = 5;
            }
            if ( VCO2_OCT_position < 0 ) {
                VCO2_OCT_position = 0;
            }
        
            if (VCO2_OCT_position != VCO2_OCT_position_prev){
                //send change to teensy
                Serial3.write();//send ID DAC2
                //send value
            }
        }

        if (VCO2_OCT_LVL_select == HIGH) { //encoder controls VCO1 volume
            VCO2_LVL_position_prev = VCO2_LVL_position;
        
            getPosition(enc_OCTLVL_A, enc_OCTLVL_B, enc_OCTLVL_A_prev, enc_OCTLVL_B_prev, VCO2_LVL_position, mux1A, mux1B); //get new position
        
            if ( VCO2_LVL_position > 127 ) { //boundary check
                VCO2_LVL_position = 127;
            }
            if ( VCO2_LVL_position < 0 ) {
                VCO2_LVL_position = 0;
            }
        
            if (VCO2_LVL_position != VCO2_LVL_position_prev){
                //send change to teensy
                Serial3.write();//send ID DAC2
                //send value
            }
        }   
    }


    ///////////MULTI ON PIN 1: CONTROLS CUTOFF//////////////////////////////////////////////////    
    digitalWrite(S0, HIGH);
    digitalWrite(S1, LOW);
    digitalWrite(S2, LOW);
    digitalWrite(S3, LOW); //Pin 2 is always on VCF cutoff

    CUTOFF_position_prev = CUTOFF_position;  
        
    getPosition(enc_CUTOFF_A, enc_CUTOFF_B, enc_CUTOFF_A_prev, enc_CUTOFF_B_prev, CUTOFF_position, mux1A, mux1B); //get new position
        
    if ( CUTOFF_position > 127 ) { //boundary check
        CUTOFF_position = 127;
        }
    if ( CUTOFF_position < 0 ) {
        VCO1_OCT_position = 0;
        }
        
    if (CUTOFF_position != CUTOFF_position_prev){
        //send change to teensy
        Serial3.write();//send ID
                //send value
    }


    ///////////MULTI ON PIN 2: CONTROLS LFO PWMs//////////////////////////////////////////////////
    digitalWrite(S0, LOW);
    digitalWrite(S1, HIGH);
    digitalWrite(S2, LOW);
    digitalWrite(S3, LOW); //encoder controls LFO PWMs
    if (LFO_select == LOW) { //encoder controls LFO1 PWM
        LFO1_PWM_position_prev = LFO1_PWM_position;
        getPosition(enc_LFO_PWM_A, enc_LFO_PWM_B, enc_LFO_PWM_A_prev, enc_LFO_PWM_B_prev,LFO1_PWM_position, mux1A, mux1B); //get new position

        if ( LFO1_PWM_position > 127 ) { //boundary check
            LFO1_PWM_position = 127;
            }
        if ( LFO1_PWM_position < 0 ) {
            LFO1_PWM_position = 0;
            }
            
        if (LFO1_PWM_position != LFO1_PWM_position_prev){
        //send change to teensy
        Serial3.write();//send ID
                //send value
        }
    }
    if (LFO_select == HIGH) { //encoder controls LFO2 PWM
    
        LFO2_PWM_position_prev = LFO2_PWM_position;
        
        getPosition(enc_LFO_PWM_A, enc_LFO_PWM_B, enc_LFO_PWM_A_prev, enc_LFO_PWM_B_prev, LFO2_PWM_position, mux1A, mux1B); //get new position
        
        if ( LFO2_PWM_position > 127 ) { //boundary check
        LFO2_PWM_position = 127;
        }
        if ( LFO2_PWM_position < 0 ) {
        LFO2_PWM_position = 0;
        }
        
        if (LFO2_PWM_position != LFO2_PWM_position_prev){
        //send change to teensy
        Serial3.write();//send ID 
        //send value  
        }   
    }
    ///////////MULTI ON PIN 3: CONTROLS FM AND DETUNE////////////////////////////////////////////////// 
    digitalWrite(S0, HIGH);
    digitalWrite(S1, HIGH);
    digitalWrite(S2, LOW);
    digitalWrite(S3, LOW);
    if (VCO_select == LOW) { //encoder controls FM AMOUNT
        VCO1_FM_AMOUNT_position_prev = VCO1_FM_AMOUNT_position;
        getPosition(enc_FM_DETUNE_A, enc_FM_DETUNE_B, enc_FM_DETUNE_A_prev, enc_FM_DETUNE_B_prev, VCO1_FM_AMOUNT_position, mux1A, mux1B); //get new position

        if ( VCO1_FM_AMOUNT_position > 127 ) { //boundary check
            VCO1_FM_AMOUNT_position = 127;
        }
        if ( VCO1_FM_AMOUNT_position < 0 ) {
            VCO1_FM_AMOUNT_position = 0;
        }
            
        if (VCO1_FM_AMOUNT_position != VCO1_FM_AMOUNT_position_prev){
        //send change to teensy
        Serial3.write();//send ID
                //send value
        }
    }
    if (VCO_select == HIGH) { //encoder controls VCO2 detune amount
    
        VCO2_DETUNE_prev = VCO2_DETUNE_position;
        
        getPosition(enc_FM_DETUNE_A, enc_FM_DETUNE_B, enc_FM_DETUNE_A_prev, enc_FM_DETUNE_B_prev, VCO2_DETUNE_position, mux1A, mux1B); //get new position
        
        if ( VCO2_DETUNE_position > 127 ) { //boundary check
        VCO2_DETUNE_position = 127;
        }
        if ( VCO2_DETUNE_position < 0 ) {
        VCO2_DETUNE_position = 0;
        }
        
        if (VCO2_DETUNE_position != VCO2_DETUNE_position_prev){
        //send change to teensy
        Serial3.write();//send ID
                //send value  
        }   
    }

    ///////////MULTI ON PIN 4: CONTROLS ADSR RELEASE//////////////////////////////////////////////////
    digitalWrite(S0, LOW);
    digitalWrite(S1, LOW);
    digitalWrite(S2, HIGH);
    digitalWrite(S3, LOW);
    if (ADSR_select == LOW) { //encoder controls ADSR1 RELEASE
        ADSR1_RELEASE_position_prev =ADSR1_RELEASE_position;
        getPosition(enc_ADSR_RELEASE_A, enc_ADSR_RELEASE_B, enc_ADSR_RELEASE_A_prev, enc_ADSR_RELEASE_B_prev, ADSR1_RELEASE_position, mux1A, mux1B); //get new position

        if ( ADSR1_RELEASE_position > 127 ) { //boundary check
            ADSR1_RELEASE_position = 127;
        }
        if ( ADSR1_RELEASE_position < 0 ) {
            ADSR1_RELEASE_position = 0;
        }
            
        if (ADSR1_RELEASE_position != ADSR1_RELEASE_position_prev){
        //send change to teensy
        Serial3.write();//send ID
        //send value
        }
    }
    if (ADSR_select == HIGH) { //encoder controls ADSR2 RELEASE
    
        ADSR2_RELEASE_prev = ADSR2_RELEASE_position;
        
        getPosition(enc_ADSR_RELEASE_A, enc_ADSR_RELEASE_B, enc_ADSR_RELEASE_A_prev, enc_ADSR_RELEASE_B_prev, ADSR2_RELEASE_position, mux1A, mux1B); //get new position
        
        if ( ADSR2_RELEASE_position > 127 ) { //boundary check
        ADSR2_RELEASE_position = 127;
        }
        if ( ADSR2_RELEASE_position < 0 ) {
        ADSR2_RELEASE_position = 0;
        }
        
        if (ADSR2_RELEASE_position != ADSR2_RELEASE_position_prev){
        //send change to teensy
        Serial3.write();//send ID
        //send value  
        }   
    }

    ///////////MULTI ON PIN 5: CONTROLS ADSR DECAY//////////////////////////////////////////////////
    digitalWrite(S0, HIGH);
    digitalWrite(S1, LOW);
    digitalWrite(S2, HIGH);
    digitalWrite(S3, LOW);
    if (ADSR_select == LOW) { //encoder controls ADSR1 DECAY
        ADSR1_DECAY_position_prev =ADSR1_DECAY_position;
        getPosition(enc_ADSR_DECAY_A, enc_ADSR_DECAY_B, enc_ADSR_DECAY_A_prev, enc_ADSR_DECAY_B_prev, ADSR1_DECAY_position, mux1A, mux1B); //get new position

        if ( ADSR1_DECAY_position > 127 ) { //boundary check
            ADSR1_DECAY_position = 127;
        }
        if ( ADSR1_DECAY_position < 0 ) {
            ADSR1_DECAY_position = 0;
        }
            
        if (ADSR1_DECAY_position != ADSR1_DECAY_position_prev){
        //send change to teensy
        Serial3.write();//send ID
        //send value
        }
    }
    if (ADSR_select == HIGH) { //encoder controls ADSR2 DECAY
    
        ADSR2_DECAY_prev = ADSR2_DECAY_position;
        
        getPosition(enc_ADSR_DECAY_A, enc_ADSR_DECAY_B, enc_ADSR_DECAY_A_prev, enc_ADSR_DECAY_B_prev, ADSR2_DECAY_position, mux1A, mux1B); //get new position
        
        if ( ADSR2_DECAY_position > 127 ) { //boundary check
        ADSR2_DECAY_position = 127;
        }
        if ( ADSR2_DECAY_position < 0 ) {
        ADSR2_DECAY_position = 0;
        }
        
        if (ADSR2_DECAY_position != ADSR2_DECAY_position_prev){
        //send change to teensy
        Serial3.write();//send ID
        //send value  
        }   
    }
  
    ///////////MULTI ON PIN 6: CONTROLS VCO PWMs//////////////////////////////////////////////////
    digitalWrite(S0, LOW);
    digitalWrite(S1, HIGH);
    digitalWrite(S2, HIGH);
    digitalWrite(S3, LOW);
    if (VCO_select == LOW) { //encoder controls VCO1 PWM
        VCO1_PWM_position_prev = VCO1_PWM_position;
        getPosition(enc_VCO_PWM_A, enc_VCO_PWM_B, enc_VCO_PWM_A_prev, enc_VCO_PWM_B_prev, VCO1_PWM_position, mux1A, mux1B); //get new position

        if ( VCO1_PWM_position > 127 ) { //boundary check
            VCO1_PWM_position = 127;
            }
        if ( VCO1_PWM_position < 0 ) {
            VCO1_PWM_position = 0;
            }
            
        if (VCO1_PWM_position != VCO1_PWM_position_prev){
        //send change to teensy
        Serial3.write();//send ID
        //send value
        }
    }
    if (VCO_select == HIGH) { //encoder controls VCO2 PWM
    
        VCO2_PWM_position_prev = VCO2_PWM_position;
        
        getPosition(enc_VCO_PWM_A, enc_VCO_PWM_B, enc_VCO_PWM_A_prev, enc_VCO_PWM_B_prev, VCO2_PWM_position, mux1A, mux1B); //get new position
        
        if ( VCO2_PWM_position > 127 ) { //boundary check
        VCO2_PWM_position = 127;
        }
        if ( VCO2_PWM_position < 0 ) {
        VCO2_PWM_position = 0;
        }
        
        if (VCO2_PWM_position != VCO2_PWM_position_prev){
        //send change to teensy
        Serial3.write();//send ID
        //send value  
        }   
    }
    ///////////////MULTI ON PIN 7: CONTROLS LFO FREQ AND TIME DIVISION//////////////////////////////////////////////
    digitalWrite(S0, HIGH);
    digitalWrite(S1, HIGH);
    digitalWrite(S2, HIGH);
    digitalWrite(S3, LOW);
  
    ///////////////MULTI ON PIN 8: CONTROLS ADSR SUSTAIN//////////////////////////////////////////////
    digitalWrite(S0, LOW);
    digitalWrite(S1, LOW);
    digitalWrite(S2, LOW);
    digitalWrite(S3, HIGH);
    if (ADSR_select == LOW) { //encoder controls ADSR1 SUSTAIN
        ADSR1_SUSTAIN_position_prev =ADSR1_SUSTAIN_position;
        getPosition(enc_ADSR_SUSTAIN_A, enc_ADSR_SUSTAIN_B, enc_ADSR_SUSTAIN_A_prev, enc_ADSR_SUSTAIN_B_prev, ADSR1_SUSTAIN_position, mux1A, mux1B); //get new position

        if ( ADSR1_SUSTAIN_position > 127 ) { //boundary check
            ADSR1_SUSTAIN_position = 127;
        }
        if ( ADSR1_SUSTAIN_position < 0 ) {
            ADSR1_SUSTAIN_position = 0;
        }
            
        if (ADSR1_SUSTAIN_position != ADSR1_SUSTAIN_position_prev){
        //send change to teensy
        Serial3.write();//send ID
        //send value
        }
    }
    if (ADSR_select == HIGH) { //encoder controls ADSR2 SUSTAIN
    
        ADSR2_SUSTAIN_prev = ADSR2_SUSTAIN_position;
        
        getPosition(enc_ADSR_SUSTAIN_A, enc_ADSR_SUSTAIN_B, enc_ADSR_SUSTAIN_A_prev, enc_ADSR_SUSTAIN_B_prev, ADSR2_SUSTAIN_position, mux1A, mux1B); //get new position
        
        if ( ADSR2_SUSTAIN_position > 127 ) { //boundary check
        ADSR2_SUSTAIN_position = 127;
        }
        if ( ADSR2_SUSTAIN_position < 0 ) {
        ADSR2_SUSTAIN_position = 0;
        }
        
        if (ADSR2_SUSTAIN_position != ADSR2_SUSTAIN_position_prev){
        //send change to teensy 
        Serial3.write();//send ID
        //send value 
        }   
    }
    ///////////////MULTI ON PIN 9: CONTROLS LFO OFFSET//////////////////////////////////////////////
    digitalWrite(S0, HIGH);
    digitalWrite(S1, LOW);
    digitalWrite(S2, LOW);
    digitalWrite(S3, HIGH);

///////////////MULTI ON PIN 10: CONTROLS LFO MAX AMPLITUDE///////////////////////////////////////////////
  digitalWrite(S0, LOW);
  digitalWrite(S1, HIGH);
  digitalWrite(S2, LOW);
  digitalWrite(S3, HIGH);

///////////////MULTI ON PIN 11: CONTROLS VCO SHAPE//////////////////////////////////////////////
  digitalWrite(S0, HIGH);
  digitalWrite(S1, HIGH);
  digitalWrite(S2, LOW);
  digitalWrite(S3, HIGH);

///////////////MULTI ON PIN 12: CONTROLS DRIVE//////////////////////////////////////////////
  digitalWrite(S0, LOW);
  digitalWrite(S1, LOW);
  digitalWrite(S2, HIGH);
  digitalWrite(S3, HIGH);
  
///////////////MULTI ON PIN 13: CONTROLS ADSR ATTACK//////////////////////////////////////////////
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);
  digitalWrite(S2, HIGH);
  digitalWrite(S3, HIGH);

///////////////MULTI ON PIN 14: CONTROLS VCF RES//////////////////////////////////////////////
  digitalWrite(S0, LOW);
  digitalWrite(S1, HIGH);
  digitalWrite(S2, HIGH);
  digitalWrite(S3, HIGH);
  
///////////////MULTI ON PIN 15: CONTROLS LFO SHAPE//////////////////////////////////////////////
  digitalWrite(S0, HIGH);
  digitalWrite(S1, HIGH);
  digitalWrite(S2, HIGH);
  digitalWrite(S3, HIGH);
   
}

void getPosition(bool encA,bool encB,bool encA_prev,bool encB_prev, int param_position,int muxA,int muxB) {  //send the parameter virtual pin names, their previous position, the parameter current value and
                                                                                   //the multiplexer pins on which the physical encoder is, "returns" the new parameter position.
                                                                                    
      encA = digitalRead(muxA); //reads encoder physical position, make sure the multiplexer is set accordingly before calling function.
      encB = digitalRead(muxB); 
                                                                                       
      if (encA != encA_prev && encB == encB_prev){      //state machine begin
        if (encB == encA) {                             //test changes when pinA has changed
          param_position++;
        }
        else{
          param_position--;  
        }
      }
    
    if (encB != encB_prev && encA == encA_prev){
      if (encA == encB) {                    //test changes when pinB has changed
        param_position--;
      }
      else{
        param_position++;  
      }
    }                                                  //state machine end
    encA_prev = encA;                                  //update virtual encoder pin previous positions
    encB_prev = encB; 
}
